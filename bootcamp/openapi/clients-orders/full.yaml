openapi: 3.0.2
info:
  title: RVorobev bootcamp openapi task
  version: 1.0.0
  description: rvorobev.bootcamp.openapi
paths:
  /clients:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/client"
          description: response
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: unexpected error
      operationId: findClients
      description: Returns all not disabled clients (OR all clients with recent orders... TODO - secure it!)
    put:
      description: Updates existing client
      operationId: updateClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/client"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
          description: just-updated item
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: unexpected error

    post:
      description: Creates a new client (TODO check for duplicates)
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newClient"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
          description: just-created client

  /clients/delete/{login}:
    delete:
      description: deletes a client (TODO check rights, check if it is safe, or just set disabled on PUT)
      parameters:
        - name: login
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        "204":
          description: client deleted
        "404":
          description: client not found by login
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: unexpected error
      operationId: deleteClient
  /clients/{login}/orders:
    get:
      description: show orders with desired status (TODO check authenticated, check rights)
      operationId: findOrdersForClient
      parameters:
        - name: login
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: order status (TODO use $ref _ "#/components/schemas/orderStatus")
          required: false
          schema:
            type: string
      responses:
        "200":
          description: list of clients orders with desired status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/clientOrder"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /clients/findById/{login}:
    get:
      parameters:
        - name: login
          in: path
          description: clients login to search with
          schema:
            type: string
          required: true

      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
          description: existing client
        "404":
          description: user not found by login
        default:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: unexpected error
      operationId: findClientByLogin
      description: Return client by login
  /orders:
    get:
      description: show own orders with desired status (TODO check authenticated & rights), default AllButCancelled
      operationId: findOwnOrders
      parameters:
        - name: status
          in: query
          description: order status
          required: true
          schema:
            type: string
          #TODO $ref "#/components/schemas/orderStatus"
      responses:
        "200":
          description: list of own orders with desired status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/clientOrder"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new order
      operationId: createClientsOrder
      parameters:
        - name: orderItems
          in: query
          description: changed orderItems list (orders content)
          required: true
          style: form
          schema:
            type: array
            items:
              $ref: "#/components/schemas/orderItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newClientOrder"
      responses:
        "200":
          description: just-created item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clientOrder"
    put:
      description: edit content of the order - list of orderItems (TODO check rights, payment method, etc.)
      operationId: editOrder
      parameters:
        - name: id
          in: query
          description: ID of the order to edit
          required: true
          schema:
            type: integer
            format: int64
        - name: orderItems
          in: query
          description: changed orderItems list (orders content)
          required: true
          style: form
          schema:
            type: array
            items:
              $ref: "#/components/schemas/orderItem"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/clientOrder"
      responses:
        "200":
          description: order with changed contents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clientOrder"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{id}:
    get:
      operationId: find logged users own order by id (TODO check rights, check authenticated)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: order by id (TODO check rights)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clientOrder"
        "403":
          description: no rights
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /orders/{id}/cancel:
    get:
      description: cancel active order (TODO check rights)
      operationId: discardOrder
      parameters:
        - name: id
          in: path
          description: ID of users order to discard
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: order cancelled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/clientOrder"
        "404":
          description: order not found
        "406":
          description: unacceptable to cancel inactive orders
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items:
    get:
      description: Return items in stock filtered by tags (categories) and/or price (TODO paging, limit)
      operationId: findItems
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: priceLowerThan
          in: query
          description: selects items with price only below or equal to this (TODO -- priceHigherThan, yearOfProduction)
          required: false
          schema:
            type: number
            format: float
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      description: Creates a new item in the store (TODO Check for duplicates)
      operationId: addItem
      requestBody:
        description: item to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newItem"
      responses:
        "200":
          description: just-created item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      description: Creates a new item in the store (TODO Check for duplicates)
      operationId: editItem
      requestBody:
        description: item to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
      responses:
        "200":
          description: just-created item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items/{id}:
    get:
      description: Returns item by id (TODO check if it exists)
      operationId: findItemById
      parameters:
        - name: id
          in: path
          description: ID of item to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: item description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      description: delete item by Id
      operationId: deleteItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: item deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  schemas:

    clientOrder:
      description: one clients order, with id
      allOf:
        - $ref: "#/components/schemas/newClientOrder"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    newClientOrder:
      description: one clients order, not persisted
      type: object
      required:
        - orderDate
        - client
        - orderItemsList
        - orderSum
        - status
      properties:
        orderDate:
          type: string
          format: date-time
        client:
          $ref: "#/components/schemas/client"
        orderItemsList:
          type: array
          items:
            $ref: "#/components/schemas/orderItem"
        orderSum:
          type: number
          format: float
        status:
          description: TODO use $ref_ "#/components/schemas/orderStatus"
          type: string

    orderItem:
      description: one order item, with id
      allOf:
        - $ref: "#/components/schemas/newOrderItem"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    newOrderItem:
      description: one order item, not persisted
      type: object
      required:
        - item
        - priceBought
        - qtyBought
      properties:
        item:
          $ref: "#/components/schemas/item"
        priceBought:
          type: number
          format: float
        qtyBought:
          type: integer
          format: int32

    item:
      description: item in stock with id
      allOf:
        - $ref: "#/components/schemas/newItem"
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
    newItem:
      description: item in stock, not persisted
      type: object
      required:
        - name
        - qty
        - price
        - date
      properties:
        name:
          type: string
        description:
          type: string
        tag:
          type: string
        qty:
          description: quantity of items in stock
          type: integer
          format: int32
        price:
          type: number
          format: float
        dateAdded:
          type: string
          format: date


    orderStatus:
      enum:
        - All
        - ActiveOnly
        - CompletedOnly
        - CancelledOnly
        - AllButCancelled
      default: AllButCancelled

    client:
      description: client with id
      allOf:
        - $ref: "#/components/schemas/newClient"
        - required:
            - id
          type: object
          properties:
            id:
              format: int64
              type: integer

    newClient:
      description: client, not persisted
      required:
        - name
        - login
        - email
        - dayOfBirth
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        email:
          format: email
          type: string
        dayOfBirth:
          format: date
          type: string
        disabled:
          default: false
          type: boolean

    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string